name: CI/CD Pipeline with ArgoCD

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: docker.io/stenny1710/job-portal-backend
  AWS_REGION: us-west-2
  SONAR_HOST_URL: http://your-sonarqube-url:9000
  SONAR_PROJECT_KEY: job-portal
  SONAR_ORGANIZATION: your-org
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ARGOCD_SERVER: argocd.yourdomain.com

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          cd backend
          python -m unittest discover tests

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: ${{ env.SONAR_ORGANIZATION }}
          token: ${{ secrets.SONAR_TOKEN }}
          host-url: ${{ env.SONAR_HOST_URL }}

  docker-build-and-deploy:
    needs: test-and-analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} ./backend
          docker push $DOCKER_IMAGE:${{ github.sha }}

  deploy-to-argocd:
    needs: docker-build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Sync ArgoCD App
        run: |
          argocd app sync job-portal \
            --prune \
            --refresh \
            --insecure

      - name: Wait for App to be Healthy
        run: |
          argocd app wait job-portal \
            --health \
            --timeout 300 \
            --insecure

